openapi: 3.0.3
info:
  title: User Service API
  description: API for user management, authentication and authorization
  version: 1.0.0
  
servers:
  - url: /api/v1
    description: Base API path

tags:
  - name: auth
    description: Authentication operations
  - name: users
    description: User management operations

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Create a new user account with login, password and email
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user
      description: Login with username and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/profile:
    get:
      tags:
        - users
      summary: Get user profile
      description: Retrieve all profile data for the authenticated user
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - users
      summary: Update user profile
      description: Update profile information for the authenticated user
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    UserRegistration:
      type: object
      required:
        - login
        - password
        - email
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 50
          example: "john_doe"
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 100
          example: "SecureP@ssw0rd"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
    
    UserLogin:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "SecureP@ssw0rd"
    
    UserProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+79123456789"
        address:
          type: string
          example: "123 Main St, City"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        login:
          type: string
          example: "john_doe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+79123456789"
        address:
          type: string
          example: "123 Main St, City"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-15T14:30:00Z"
    
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        login:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
    
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresAt:
          type: string
          format: date-time
          example: "2023-01-01T14:00:00Z"
        user:
          $ref: '#/components/schemas/UserResponse'
    
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Bad request"
        details:
          type: array
          items:
            type: string
          example: ["Field 'email' must be a valid email address"]

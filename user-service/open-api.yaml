openapi: 3.0.3
info:
  title: User Service API
  description: API for user management, authentication and authorization
  version: 1.0.0
  
servers:
  - url: /api/v1
    description: Base API path

tags:
  - name: auth
    description: Authentication operations
  - name: users
    description: User management operations

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Create a new user account with login, password and email
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              registerUser:
                summary: Register a new user
                value:
                  login: "john_doe"
                  password: "SecureP@ssw0rd"
                  email: "john.doe@example.com"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                registerSuccess:
                  summary: Successful registration response
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    login: "john_doe"
                    email: "john.doe@example.com"
                    createdAt: "2023-01-01T12:00:00Z"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidInput:
                  summary: Invalid input error
                  value:
                    code: 400
                    message: "Bad request"
                    details: ["Password must be at least 8 characters long"]
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                userExists:
                  summary: User already exists error
                  value:
                    code: 409
                    message: "User with this login already exists"
  
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user
      description: Login with username and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            examples:
              loginUser:
                summary: Login with credentials
                value:
                  login: "john_doe"
                  password: "SecureP@ssw0rd"
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                loginSuccess:
                  summary: Successful login response
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAiLCJleHAiOjE2MTY3NjY5MDB9.8Iy6iFPYXaCt_DO6hBQ8DNlVHJ9RJcFD-_6L5bDUEMM"
                    expiresAt: "2023-01-01T14:00:00Z"
                    user:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      login: "john_doe"
                      email: "john.doe@example.com"
                      createdAt: "2023-01-01T12:00:00Z"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidCredentials:
                  summary: Invalid credentials error
                  value:
                    code: 401
                    message: "Invalid credentials"
  
  /users/profile:
    get:
      tags:
        - users
      summary: Get user profile
      description: Retrieve all profile data for the authenticated user
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                profileData:
                  summary: User profile data
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    login: "john_doe"
                    firstName: "John"
                    lastName: "Doe"
                    birthDate: "1990-01-01"
                    email: "john.doe@example.com"
                    phoneNumber: "+79123456789"
                    address: "123 Main St, City"
                    avatar: "https://example.com/avatar.jpg"
                    createdAt: "2023-01-01T12:00:00Z"
                    updatedAt: "2023-01-15T14:30:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unauthorized:
                  summary: Unauthorized error
                  value:
                    code: 401
                    message: "Could not validate credentials"
    
    put:
      tags:
        - users
      summary: Update user profile
      description: Update profile information for the authenticated user
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
            examples:
              updateProfile:
                summary: Update user profile
                value:
                  firstName: "John"
                  lastName: "Doe"
                  birthDate: "1990-01-01"
                  email: "new.email@example.com"
                  phoneNumber: "+79123456789"
                  address: "456 New St, City"
                  avatar: "https://example.com/new-avatar.jpg"
      responses:
        '200':
          description: Profile successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                updatedProfile:
                  summary: Updated profile data
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    login: "john_doe"
                    firstName: "John"
                    lastName: "Doe"
                    birthDate: "1990-01-01"
                    email: "new.email@example.com"
                    phoneNumber: "+79123456789"
                    address: "456 New St, City"
                    avatar: "https://example.com/new-avatar.jpg"
                    createdAt: "2023-01-01T12:00:00Z"
                    updatedAt: "2023-01-15T14:30:00Z"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidEmail:
                  summary: Invalid email error
                  value:
                    code: 400
                    message: "Email already in use"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unauthorized:
                  summary: Unauthorized error
                  value:
                    code: 401
                    message: "Could not validate credentials"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    UserRegistration:
      type: object
      required:
        - login
        - password
        - email
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 50
          example: "john_doe"
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 100
          example: "SecureP@ssw0rd"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
    
    UserLogin:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "SecureP@ssw0rd"
    
    UserProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+79123456789"
        address:
          type: string
          example: "123 Main St, City"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        login:
          type: string
          example: "john_doe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+79123456789"
        address:
          type: string
          example: "123 Main St, City"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-15T14:30:00Z"
    
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        login:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
    
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresAt:
          type: string
          format: date-time
          example: "2023-01-01T14:00:00Z"
        user:
          $ref: '#/components/schemas/UserResponse'
    
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Bad request"
        details:
          type: array
          items:
            type: string
          example: ["Field 'email' must be a valid email address"]


